{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/.DS_Store", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/.github/workflows/zap_test.yml", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/.gitignore", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/.python-version", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/.vscode/settings.json", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/Dockerfile", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/README.md", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/Files/test.txt", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/__init__.py", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/requirements.txt", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/static/loader.js", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/index.html", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/layout.html", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/test.html", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/view.html", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/yaml_test.html", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/test.db", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/old-workflows/semgrep.yml", "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/tests/e2e_zap.py"]}, "results": [{"check_id": "python.flask.security.dangerous-template-string.dangerous-template-string", "end": {"col": 89, "line": 114, "offset": 3391}, "extra": {"engine_kind": "OSS", "fingerprint": "d1c6e360a56a8744cff63f9dd16b6f565184b6e9ae36c98aecbe44bcc457d729d16ef3b33ad20dfdee4936b9daa84a7781fa946f69a15bda6e3af2244cdb49f5_0", "is_ignored": false, "lines": "    template = '''<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ''' % request.url\n\n    return render_template_string(template, dir = dir, help = help, locals = locals),404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html", "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9526, "rule_id": "v8UnZJ", "rv_id": 834484, "url": "https://semgrep.dev/playground/r/yeTNgRb/python.flask.security.dangerous-template-string.dangerous-template-string", "version_id": "yeTNgRb"}}, "shortlink": "https://sg.run/b79E", "source": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$S": {"abstract_content": "request.url", "end": {"col": 22, "line": 112, "offset": 3301}, "start": {"col": 11, "line": 112, "offset": 3290}}, "$V": {"abstract_content": "template", "end": {"col": 13, "line": 103, "offset": 3124}, "start": {"col": 5, "line": 103, "offset": 3116}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 5, "line": 103, "offset": 3116}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 85, "line": 114, "offset": 3387}, "extra": {"engine_kind": "OSS", "fingerprint": "6e9d8715bb4114b51fed5446fc4de46bc44af445734952d18c2d18e77c7274f61d37b366c6f2a3c5772277f0a7ef76c8c5e910f54a39da4d17e3601a58e36815_0", "is_ignored": false, "lines": "    return render_template_string(template, dir = dir, help = help, locals = locals),404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9540, "rule_id": "5rUOv1", "rv_id": 834480, "url": "https://semgrep.dev/playground/r/X0T5KQJ/python.flask.security.audit.render-template-string.render-template-string", "version_id": "X0T5KQJ"}}, "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 12, "line": 114, "offset": 3314}}, {"check_id": "python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret", "end": {"col": 193, "line": 184, "offset": 6227}, "extra": {"engine_kind": "OSS", "fingerprint": "02cc11d6501b1a01c1cead27e3c2a564b1a9bdd1ea976aa59b43e24a550dffb17140093692c5769c0971d8b656ced2034958cacee1afc33b81bf4076d11b055a_0", "is_ignored": false, "lines": "            auth_token = jwt.encode({'user': username, 'exp': get_exp_date(), 'nbf': datetime.datetime.utcnow(), 'iss': 'we45', 'iat': datetime.datetime.utcnow()}, app.config['SECRET_KEY_HMAC'], algorithm='HS256')", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9557, "rule_id": "X5U8P5", "rv_id": 834513, "url": "https://semgrep.dev/playground/r/WrTdnOd/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret", "version_id": "WrTdnOd"}}, "shortlink": "https://sg.run/l2E9", "source": "https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret", "subcategory": ["vuln"], "technology": ["jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$SECRET": {"abstract_content": "app.config['SECRET_KEY_HMAC']", "end": {"col": 194, "line": 184, "offset": 6228}, "start": {"col": 165, "line": 184, "offset": 6199}}, "$X": {"abstract_content": "{'user'username'exp'get_exp_date()'nbf'datetime.datetime.utcnow()'iss''we45''iat'datetime.datetime.utcnow()}", "end": {"col": 163, "line": 184, "offset": 6197}, "start": {"col": 37, "line": 184, "offset": 6071}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 176, "line": 184, "offset": 6210}}, {"check_id": "python.flask.security.dangerous-template-string.dangerous-template-string", "end": {"col": 100, "line": 281, "offset": 10412}, "extra": {"engine_kind": "OSS", "fingerprint": "614298babf5622563316efa9790dfcda402ea979ed65a6f80fa1bc6a0f2116c7bab80d7e65ac2a16284daa1b17289c12f140a186369eafdbe01cd9afdeb226dc_0", "is_ignored": false, "lines": "                    template = '''<html>\n                        <head>\n                        <title>Error</title>\n                        </head>\n                        <body>\n                        <h1>Oops Error Occurred</h1>\n                        <h3>%s</h3>\n                        </body>\n                        </html>\n                        ''' % str(e)\n                    return render_template_string(template, dir=dir, help=help, locals=locals), 404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html", "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9526, "rule_id": "v8UnZJ", "rv_id": 834484, "url": "https://semgrep.dev/playground/r/yeTNgRb/python.flask.security.dangerous-template-string.dangerous-template-string", "version_id": "yeTNgRb"}}, "shortlink": "https://sg.run/b79E", "source": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$S": {"abstract_content": "str(e)", "end": {"col": 37, "line": 280, "offset": 10312}, "start": {"col": 31, "line": 280, "offset": 10306}}, "$V": {"abstract_content": "template", "end": {"col": 29, "line": 271, "offset": 9971}, "start": {"col": 21, "line": 271, "offset": 9963}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 21, "line": 271, "offset": 9963}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 95, "line": 281, "offset": 10407}, "extra": {"engine_kind": "OSS", "fingerprint": "6e9d8715bb4114b51fed5446fc4de46bc44af445734952d18c2d18e77c7274f61d37b366c6f2a3c5772277f0a7ef76c8c5e910f54a39da4d17e3601a58e36815_1", "is_ignored": false, "lines": "                    return render_template_string(template, dir=dir, help=help, locals=locals), 404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9540, "rule_id": "5rUOv1", "rv_id": 834480, "url": "https://semgrep.dev/playground/r/X0T5KQJ/python.flask.security.audit.render-template-string.render-template-string", "version_id": "X0T5KQJ"}}, "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 28, "line": 281, "offset": 10340}}, {"check_id": "python.flask.security.insecure-deserialization.insecure-deserialization", "end": {"col": 29, "line": 329, "offset": 11793}, "extra": {"engine_kind": "OSS", "fingerprint": "28effc050bf2745f2392e185571daf6f1b87821cfc538848977c283830e2a34aadbd760b148f8458f67335034f234b26ca8b49af6140bd193b8201e525f9e417_0", "is_ignored": false, "lines": "        ydata = yaml.load(y)", "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.python.org/3/library/pickle.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9527, "rule_id": "d8UjBO", "rv_id": 834498, "url": "https://semgrep.dev/playground/r/7ZTxRgA/python.flask.security.insecure-deserialization.insecure-deserialization", "version_id": "7ZTxRgA"}}, "shortlink": "https://sg.run/N45z", "source": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization", "subcategory": ["audit"], "technology": ["flask"], "vulnerability_class": ["Insecure Deserialization "]}, "metavars": {"$X": {"abstract_content": "yaml_hammer", "end": {"col": 16, "line": 316, "offset": 11366}, "start": {"col": 5, "line": 316, "offset": 11355}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/app.py", "start": {"col": 17, "line": 329, "offset": 11781}}, {"check_id": "generic.html-templates.security.var-in-href.var-in-href", "end": {"col": 41, "line": 12, "offset": 320}, "extra": {"engine_kind": "OSS", "fingerprint": "69761b0189ac7200258e50d26d0f62cb5b1d73e79384dd300a1761f5fdf5636de42fffa7c58efe04fe7af6b4b9bc899a7a30d47de960b99499e0e8ba69aeb4a0_0", "is_ignored": false, "lines": "            <li><a href = \"{{ url[0] }}\">{{ url[0] }}</a> - {{ url[1] }} - Allowed Methods: {{ url[2] }}</li>", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI", "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url", "https://github.com/pugjs/pug/issues/2952", "https://content-security-policy.com/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9030, "rule_id": "QrUzD1", "rv_id": 833563, "url": "https://semgrep.dev/playground/r/qkTQngd/generic.html-templates.security.var-in-href.var-in-href", "version_id": "qkTQngd"}}, "shortlink": "https://sg.run/x1kP", "source": "https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href", "subcategory": ["audit"], "technology": ["html-templates"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/app/templates/index.html", "start": {"col": 20, "line": 12, "offset": 299}}, {"check_id": "python.requests.security.disabled-cert-validation.disabled-cert-validation", "end": {"col": 69, "line": 18, "offset": 435}, "extra": {"engine_kind": "OSS", "fingerprint": "cd1516a0398e57f8890ae3940920a384f287aa8b8641f5b4cb02018ff8c838e52abf757326b28a4b33d82a4909011f4efcc62651ae1569b15d500739eb7c8f19_0", "fix": "requests.post(target_url + '/login',\n                      proxies=proxies, json=auth_dict, verify=True)", "is_ignored": false, "lines": "login = requests.post(target_url + '/login',\n                      proxies=proxies, json=auth_dict, verify=False)", "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-295: Improper Certificate Validation"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9694, "rule_id": "qNUoYR", "rv_id": 834711, "url": "https://semgrep.dev/playground/r/RGTKxoy/python.requests.security.disabled-cert-validation.disabled-cert-validation", "version_id": "RGTKxoy"}}, "shortlink": "https://sg.run/AlYp", "source": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation", "subcategory": ["audit"], "technology": ["requests"], "vulnerability_class": ["Improper Authentication"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/tests/e2e_zap.py", "start": {"col": 9, "line": 17, "offset": 330}}, {"check_id": "python.requests.security.disabled-cert-validation.disabled-cert-validation", "end": {"col": 83, "line": 29, "offset": 765}, "extra": {"engine_kind": "OSS", "fingerprint": "cd1516a0398e57f8890ae3940920a384f287aa8b8641f5b4cb02018ff8c838e52abf757326b28a4b33d82a4909011f4efcc62651ae1569b15d500739eb7c8f19_1", "fix": "requests.get(\n        target_url + '/get/2', proxies=proxies, headers=auth_header, verify=True)", "is_ignored": false, "lines": "    get_cust_id = requests.get(\n        target_url + '/get/2', proxies=proxies, headers=auth_header, verify=False)", "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-295: Improper Certificate Validation"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9694, "rule_id": "qNUoYR", "rv_id": 834711, "url": "https://semgrep.dev/playground/r/RGTKxoy/python.requests.security.disabled-cert-validation.disabled-cert-validation", "version_id": "RGTKxoy"}}, "shortlink": "https://sg.run/AlYp", "source": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation", "subcategory": ["audit"], "technology": ["requests"], "vulnerability_class": ["Improper Authentication"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/tests/e2e_zap.py", "start": {"col": 19, "line": 28, "offset": 669}}, {"check_id": "python.requests.security.disabled-cert-validation.disabled-cert-validation", "end": {"col": 103, "line": 37, "offset": 1065}, "extra": {"engine_kind": "OSS", "fingerprint": "cd1516a0398e57f8890ae3940920a384f287aa8b8641f5b4cb02018ff8c838e52abf757326b28a4b33d82a4909011f4efcc62651ae1569b15d500739eb7c8f19_2", "fix": "requests.post(\n        target_url + '/fetch/customer', json=post, proxies=proxies, headers=auth_header, verify=True)", "is_ignored": false, "lines": "    fetch_customer_post = requests.post(\n        target_url + '/fetch/customer', json=post, proxies=proxies, headers=auth_header, verify=False)", "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-295: Improper Certificate Validation"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9694, "rule_id": "qNUoYR", "rv_id": 834711, "url": "https://semgrep.dev/playground/r/RGTKxoy/python.requests.security.disabled-cert-validation.disabled-cert-validation", "version_id": "RGTKxoy"}}, "shortlink": "https://sg.run/AlYp", "source": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation", "subcategory": ["audit"], "technology": ["requests"], "vulnerability_class": ["Improper Authentication"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/tests/e2e_zap.py", "start": {"col": 27, "line": 36, "offset": 948}}, {"check_id": "python.requests.security.disabled-cert-validation.disabled-cert-validation", "end": {"col": 97, "line": 45, "offset": 1393}, "extra": {"engine_kind": "OSS", "fingerprint": "cd1516a0398e57f8890ae3940920a384f287aa8b8641f5b4cb02018ff8c838e52abf757326b28a4b33d82a4909011f4efcc62651ae1569b15d500739eb7c8f19_3", "fix": "requests.post(\n        target_url + '/search', json=search, proxies=proxies, headers=auth_header, verify=True)", "is_ignored": false, "lines": "    search_customer_username = requests.post(\n        target_url + '/search', json=search, proxies=proxies, headers=auth_header, verify=False)", "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-295: Improper Certificate Validation"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9694, "rule_id": "qNUoYR", "rv_id": 834711, "url": "https://semgrep.dev/playground/r/RGTKxoy/python.requests.security.disabled-cert-validation.disabled-cert-validation", "version_id": "RGTKxoy"}}, "shortlink": "https://sg.run/AlYp", "source": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation", "subcategory": ["audit"], "technology": ["requests"], "vulnerability_class": ["Improper Authentication"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/Users/USERNAME/Downloads/Vulnerable-Flask-App-master/tests/e2e_zap.py", "start": {"col": 32, "line": 44, "offset": 1282}}], "skipped_rules": [], "version": "1.92.0"}